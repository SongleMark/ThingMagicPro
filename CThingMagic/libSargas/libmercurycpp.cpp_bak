#include "libmercurycpp.h"
#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <string.h>
#include <inttypes.h>
#include <time.h>
#include <sys/timeb.h>
#include <sys/stat.h>

#define     BSIZE               5000
#define     RED                 "\e[31m"
#define     GRN                 "\e[32m"
#define     SRC                 "\e[0m"

#define usage() {errx(1, "Please provide reader URL, such as:\n"\
    "tmr:///com4 or tmr:///com4 --ant 1,2\n"\
    "tmr://my-reader.example.com or tmr://my-reader.example.com --ant 1,2\n");}

static    TMR_Reader    m_TempRp;

Libmercurycpp::Libmercurycpp() :
    m_IsConnected(false),
    m_AntennaList(NULL),
    m_AntennaCount(0)
{
    m_Readerp = &m_TempRp;
}

Libmercurycpp::~Libmercurycpp() {

}

/*!
 * \brief    : Libmercurycpp::connect
 * \return   : true by connect successed, false by others.
 * \function : Create headers of Reader and connect to ThingMagic Readers
 */
bool Libmercurycpp::connect(const char *url, char **antennaNum, int count) {
    const char *TAG = "connect";
    TMR_Status  ret;

    uint8_t  buffer[20];
    if(NULL == url || NULL == antennaNum || 0 == count) {
        LOGE(TAG, "paramters error !!!");
        return false;
    }
    for(int i = 0; i < count; i ++) {
        parseAntennaList(buffer, &m_AntennaCount, antennaNum[i]);
        m_AntennaList = buffer;
    }
    ret = TMR_create(m_Readerp, url);
    if(TMR_SUCCESS != ret) {
        LOGE(TAG, "TMR_create failed !!!");
        return false;
    }
    ret = TMR_connect(m_Readerp);
    if(TMR_SUCCESS != ret) {
        LOGE(TAG, "TMR_connect failed !!!");
        return false;
    }
#if 0
    TMR_String  model;
    char str[64];

    m_Region = TMR_REGION_NONE;
    ret = TMR_paramGet(m_Readerp, TMR_PARAM_REGION_ID, &m_Region);
    if(TMR_SUCCESS != ret) {
        LOGE("TMR_paramGet", "getting region failed !!!");
        return false;
    }

    if (TMR_REGION_NONE == m_Region) {
        TMR_RegionList regions;
        TMR_Region _regionStore[32];
        regions.list = _regionStore;
        regions.max = sizeof(_regionStore)/sizeof(_regionStore[0]);
        regions.len = 0;

        ret = TMR_paramGet(m_Readerp, TMR_PARAM_REGION_SUPPORTEDREGIONS, &regions);
        if(ret != TMR_SUCCESS) {
            LOGE("TMR_paramGet", "getting supported regions failed !!!");
            return false;
        }
        if (regions.len < 1) {
            LOGE("regions.len < 1", "Reader doesn't supportany regions");
            //checkerr(rp, TMR_ERROR_INVALID_REGION, __LINE__, "Reader doesn't supportany regions");
        }

        m_Region = regions.list[0];
        ret = TMR_paramSet(m_Readerp, TMR_PARAM_REGION_ID, &m_Region);
        if(ret != TMR_SUCCESS) {
            LOGE("TMR_paramSet", "setting region failed !!!");
            return false;
        }
    }

    model.value = str;
    model.max = 64;
    TMR_paramGet(m_Readerp, TMR_PARAM_VERSION_MODEL, &model);
    if (((0 == strcmp("Sargas", model.value)) || (0 == strcmp("M6e Micro", model.value)) ||(0 == strcmp("M6e Nano", model.value)))
            && (NULL == m_AntennaList)) {
        LOGE("TMR_paramGet Module", "Module doesn't has antenna detection support please provide antenna list !!!");
        return false;
    }
    /**
     * for antenna configuration we need two parameters
     * 1. antennaCount : specifies the no of antennas should
     *    be included in the read plan, out of the provided antenna list.
     * 2. antennaList  : specifies  a list of antennas for the read plan.
     **/
    // initialize the read plan
    ret = TMR_RP_init_simple(&m_Plan, m_AntennaCount, m_AntennaList, TMR_TAG_PROTOCOL_GEN2, 1000);
    if(ret != TMR_SUCCESS) {
        LOGE("TMR_RP_init_simple", "initializing the  read plan failed !!!");
        return -1;
    }
    /* Commit read plan */
    ret = TMR_paramSet(m_Readerp, TMR_PARAM_READ_PLAN, &m_Plan);
    if(ret != TMR_SUCCESS) {
        LOGE("TMR_paramSet", "setting read plan failed !!!");
        return -1;
    }

    ret = TMR_read(m_Readerp, 200, NULL);
    if(ret == TMR_ERROR_TAG_ID_BUFFER_FULL) {
        /* In case of TAG ID Buffer Full, extract the tags present
         * in buffer.
         */
        LOGE("TMR_read", "reading tags: %s", TMR_strerr(m_Readerp, ret));
    }
    else if(TMR_SUCCESS == ret) {
        LOGD("TMR_read", "TMR_read successed !!!");
    }
    else {
        LOGE("TMR_read", "TMR_read failed: %s !!!", TMR_strerr(m_Readerp, ret));
        return false;
    }

    while (TMR_SUCCESS == TMR_hasMoreTags(m_Readerp)) {
        TMR_TagReadData trd;
        char epcStr[128];

        ret = TMR_getNextTag(m_Readerp, &trd);
        if(TMR_SUCCESS != ret) {
            LOGE("TMR_getNextTag", "fetching tag failed !!!");
            return false;
        }
        TMR_bytesToHex(trd.tag.epc, trd.tag.epcByteCount, epcStr);
        LOGD("Read_Tag", "EPC:%s ant:%d count:%d ", epcStr, trd.antenna, trd.readCount);
    }
#endif
    m_IsConnected = true;
    LOGD(TAG, "ThingMagic reader is connect successed !!!");

    return true;
}

/*!
 * \brief Libmercurycpp::disConnect
 * \function : destory and disconnect from ThingMagic reader.
 */
void Libmercurycpp::disConnect() {
    TMR_destroy(m_Readerp);
    m_IsConnected = false;
    LOGD("Libmercurycpp", "ThingMagic reader is disconnected !!!");
}

/*!
 * \brief Libmercurycpp::readEPC
 * \return : if read epc success return true, else return false.
 */
bool Libmercurycpp::readEPC() {
    if(!m_IsConnected) {
        LOGE("ERROR", "Please connect before read .");
        return false;
    }
    TMR_Status  ret;
    TMR_ReadPlan plan;
    TMR_String  model;
    char str[64];
    TMR_Region region;

    region = TMR_REGION_NONE;
    ret = TMR_paramGet(m_Readerp, TMR_PARAM_REGION_ID, &region);
    if(TMR_SUCCESS != ret) {
        LOGE("TMR_paramGet", "getting region failed !!!");
        return false;
    }

    if (TMR_REGION_NONE == region) {
        TMR_RegionList regions;
        TMR_Region _regionStore[32];
        regions.list = _regionStore;
        regions.max = sizeof(_regionStore)/sizeof(_regionStore[0]);
        regions.len = 0;

        ret = TMR_paramGet(m_Readerp, TMR_PARAM_REGION_SUPPORTEDREGIONS, &regions);
        if(ret != TMR_SUCCESS) {
            LOGE("TMR_paramGet", "getting supported regions failed !!!");
            return false;
        }
        if (regions.len < 1) {
            LOGE("regions.len < 1", "Reader doesn't supportany regions");
            //checkerr(rp, TMR_ERROR_INVALID_REGION, __LINE__, "Reader doesn't supportany regions");
        }

        region = regions.list[0];
        ret = TMR_paramSet(m_Readerp, TMR_PARAM_REGION_ID, &region);
        if(ret != TMR_SUCCESS) {
            LOGE("TMR_paramSet", "setting region failed !!!");
            return false;
        }
    }

    model.value = str;
    model.max = 64;
    TMR_paramGet(m_Readerp, TMR_PARAM_VERSION_MODEL, &model);
    if (((0 == strcmp("Sargas", model.value)) || (0 == strcmp("M6e Micro", model.value)) ||(0 == strcmp("M6e Nano", model.value)))
            && (NULL == m_AntennaList)) {
        LOGE("TMR_paramGet Module", "Module doesn't has antenna detection support please provide antenna list !!!");
        return false;
    }
    /**
     * for antenna configuration we need two parameters
     * 1. antennaCount : specifies the no of antennas should
     *    be included in the read plan, out of the provided antenna list.
     * 2. antennaList  : specifies  a list of antennas for the read plan.
     **/
    // initialize the read plan
    ret = TMR_RP_init_simple(&plan, m_AntennaCount, m_AntennaList, TMR_TAG_PROTOCOL_GEN2, 1000);
    if(ret != TMR_SUCCESS) {
        LOGE("TMR_RP_init_simple", "initializing the  read plan failed !!!");
        return -1;
    }
    /* Commit read plan */
    ret = TMR_paramSet(m_Readerp, TMR_PARAM_READ_PLAN, &plan);
    if(ret != TMR_SUCCESS) {
        LOGE("TMR_paramSet", "setting read plan failed !!!");
        return -1;
    }

    printf("Please input read's time(ms): ");
    char stdIn[256];
    int intTime = 0;
    if(NULL != fgets(stdIn, 256, stdin)) {
        stdIn[strlen(stdIn)] = '\0';
        intTime = atoi(stdIn);
    }
    ret = TMR_read(m_Readerp, intTime, NULL);
    if(ret == TMR_ERROR_TAG_ID_BUFFER_FULL) {
        /* In case of TAG ID Buffer Full, extract the tags present
         * in buffer.
         */
        LOGE("TMR_read", "reading tags: %s", TMR_strerr(m_Readerp, ret));
    }
    else if(TMR_SUCCESS == ret) {
        LOGD("TMR_read", "TMR_read successed !!!");
    }
    else {
        LOGE("TMR_read", "TMR_read failed: %s !!!", TMR_strerr(m_Readerp, ret));
        return false;
    }

    while (TMR_SUCCESS == TMR_hasMoreTags(m_Readerp)) {
        TMR_TagReadData trd;
        char epcStr[128];

        ret = TMR_getNextTag(m_Readerp, &trd);
        if(TMR_SUCCESS != ret) {
            LOGE("TMR_getNextTag", "fetching tag failed !!!");
            return false;
        }
        TMR_bytesToHex(trd.tag.epc, trd.tag.epcByteCount, epcStr);
        LOGD("Read_Tag", "EPC:%s ant:%d count:%d ", epcStr, trd.antenna, trd.readCount);
    }

    return true;
}

/*!
 * \brief Libmercurycpp::inventoryTags
 * \return : true by inventory success, others by false.
 */
bool Libmercurycpp::inventoryTags() {

    return true;
}

/*!
 * \brief Libmercurycpp::printDebug
 * \param tag    : flag of log.
 * \param format : the input log string.
 * \function     : print debug log.
 */
void Libmercurycpp::printDebug(const char *tag, const char *format, ...) {
    if(NULL == tag || NULL == format) {
        return ;
    }
    // show time
    struct tm    *ptm = NULL;
    struct timeb stTimeb;
    ftime(&stTimeb);
    ptm = localtime(&stTimeb.time);
    char buf[BSIZE];
    char buftime[1024];
    int year = ptm->tm_year + 1900;
    int mon = ptm->tm_mon + 1;
    sprintf(buftime, "%d/%02d/%02d %02d:%02d:%02d.%03d",
            year, mon, ptm->tm_mday,
            ptm->tm_hour, ptm->tm_min, ptm->tm_sec, stTimeb.millitm);

    std::cout << GRN;
    printf("%s [%s]: ", buftime, tag);
    // debug log
    va_list argp;
    va_start(argp, format);
    vsprintf(buf, format, argp);
    std::cout << buf << SRC << std::endl;
}

/*!
 * \brief Libmercurycpp::printError
 * \param tag    : flag of log.
 * \param format : the input log string.
 * \function     : print error/others log.
 */
void Libmercurycpp::printError(const char *tag, const char *format, ...) {
    if(NULL == tag || NULL == format) {
        return ;
    }
    // show time
    struct tm    *ptm = NULL;
    struct timeb stTimeb;
    ftime(&stTimeb);
    ptm = localtime(&stTimeb.time);
    char buf[BSIZE];
    char buftime[1024];
    int year = ptm->tm_year + 1900;
    int mon = ptm->tm_mon + 1;
    sprintf(buftime, "%d/%02d/%02d %02d:%02d:%02d.%03d",
            year, mon, ptm->tm_mday,
            ptm->tm_hour, ptm->tm_min, ptm->tm_sec, stTimeb.millitm);

    std::cout << RED;
    printf("%s [%s]: ", buftime, tag);
    // debug log
    va_list argp;
    va_start(argp, format);
    vsprintf(buf, format, argp);
    std::cout << buf << SRC << std::endl;
}

/*!
 * \brief Libmercurycpp::printT
 * \param format : the input log string.
 * \function     : only print log by date time.
 */
void Libmercurycpp::printT(const char *format, ...) {
    if(NULL == format) {
        return ;
    }
    // show time
    struct tm    *ptm = NULL;
    struct timeb stTimeb;
    ftime(&stTimeb);
    ptm = localtime(&stTimeb.time);
    char buf[BSIZE];
    char buftime[1024];
    int year = ptm->tm_year + 1900;
    int mon = ptm->tm_mon + 1;
    sprintf(buftime, "%d/%02d/%02d %02d:%02d:%02d.%03d",
            year, mon, ptm->tm_mday,
            ptm->tm_hour, ptm->tm_min, ptm->tm_sec, stTimeb.millitm);

    std::cout << GRN;
    printf("%s: ", buftime);
    // debug log
    va_list argp;
    va_start(argp, format);
    vsprintf(buf, format, argp);
    std::cout << "=> " << buf << SRC << std::endl;
}

/*!
 * \brief Libmercurycpp::getStdin
 * \return
 */
int Libmercurycpp::getStdin() {
    char stdIn[256];
    printf("Please enter options: ");
    int intValue = 0;
    if(NULL != fgets(stdIn, 256, stdin)) {
        stdIn[strlen(stdIn)] = '\0';
        intValue = atoi(stdIn);
    }

    return intValue;
}

void Libmercurycpp::cleanScreen() {
    system("clear");
}

void Libmercurycpp::noticeScreen(const char *str) {
    LOGD("Notice", "%s", str);
    printf("Enter any key to continue ... ");
    getchar();
}

void Libmercurycpp::errx(int exitval, const char *fmt, ...) {
    va_list ap;

    va_start(ap, fmt);
    vfprintf(stderr, fmt, ap);

    exit(exitval);
}

void Libmercurycpp::checkerr(TMR_Reader *rp, TMR_Status ret, int exitval, const char *msg) {
    if (TMR_SUCCESS != ret) {
        errx(exitval, "Error %s: %s\n", msg, TMR_strerr(rp, ret));
    }
}

void Libmercurycpp::serialPrinter(bool tx, uint32_t dataLen, const uint8_t *data, uint32_t timeout, void *cookie) {
    FILE *out = (FILE *)cookie;
    uint32_t i;

    fprintf(out, "%s", tx ? "Sending: " : "Received:");
    for (i = 0; i < dataLen; i++)
    {
        if (i > 0 && (i & 15) == 0)
        {
            fprintf(out, "\n         ");
        }
        fprintf(out, " %02x", data[i]);
    }
    fprintf(out, "\n");
}

void Libmercurycpp::stringPrinter(bool tx, uint32_t dataLen, const uint8_t *data, uint32_t timeout, void *cookie) {
    FILE *out = (FILE *)cookie;

    fprintf(out, "%s", tx ? "Sending: " : "Received:");
    fprintf(out, "%s\n", data);
}

void Libmercurycpp::parseAntennaList(uint8_t *antenna, uint8_t *antennaCount, char *args) {
    char *token = NULL;
    char str[] = ",";
    uint8_t i = 0x00;
    int scans;

    /* get the first token */
    if (NULL == args) {
        fprintf(stdout, "Missing argument\n");
        usage();
    }

    token = strtok(args, str);
    if (NULL == token) {
        fprintf(stdout, "Missing argument after %s\n", args);
        usage();
    }

    while(NULL != token) {
        scans = sscanf(token, "%hhu"/*SCNu8*/, &antenna[i]);
        if (1 != scans) {
            fprintf(stdout, "Can't parse '%s' as an 8-bit unsigned integer value\n", token);
            usage();
        }
        i ++;
        token = strtok(NULL, str);
    }
    *antennaCount = i;
}
